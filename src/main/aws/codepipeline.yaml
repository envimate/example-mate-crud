AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  ServiceName:
    Type: String
    Description: The name of the service being deployed.
  RepositoryOwner:
    Type: String
    Description: The owner of github repository.
  RepositoryName:
    Type: String
    Description: The name of the github repository.
  Branch:
    Type: String
    Description: The branch this pipeline will be building.
  GithubToken:
    Type: String
    Description: The personalized github token.

Resources:
  DeploymentPipeline:
    Type: "AWS::CodePipeline::Pipeline"
    Properties:
      ArtifactStore:
        Type: "S3"
        Location: !Sub "${ServiceName}-work"
      Name: !Sub "${ServiceName}DeploymentPipeline"
      RestartExecutionOnUpdate: true
      RoleArn: !GetAtt DeploymentPipelineServiceRole.Arn
      Stages:
        - Name: "GithubSource"
          Actions:
            - Name: !Sub "${ServiceName}-configuration"
              ActionTypeId:
                Category: "Source"
                Owner: "ThirdParty"
                Provider: "GitHub"
                Version: 1
              Configuration:
                Owner: !Ref RepositoryOwner
                Repo: !Ref RepositoryName
                Branch: !Ref Branch
                OAuthToken: !Ref GithubToken
              RunOrder: 1
              OutputArtifacts:
                - Name: !Sub "SOURCE-${ServiceName}"
        - Name: "Build"
          Actions:
            - Name: "MavenCleanVerify"
              ActionTypeId:
                Category: "Build"
                Owner: "AWS"
                Provider: "CodeBuild"
                Version: 1
              Configuration:
                ProjectName: !Ref CodeBuildProject
              InputArtifacts:
                - Name: !Sub "SOURCE-${ServiceName}"
              OutputArtifacts:
                - Name: infrastructure
                - Name: infrastructureConfig
              RunOrder: 1
        - Name: "ServiceDeployment"
          Actions:
            - Name: "ApplyInfrastructureCloudFormationTemplate"
              ActionTypeId:
                Category: "Deploy"
                Owner: "AWS"
                Provider: "CloudFormation"
                Version: 1
              Configuration:
                ActionMode: "CREATE_UPDATE"
                RoleArn: !GetAtt ServiceDeploymentCloudformationRole.Arn
                Capabilities: "CAPABILITY_NAMED_IAM"
                StackName: "tx-salesorder"
                TemplateConfiguration: "infrastructureConfig::cloudformation-parameters.json"
                TemplatePath: "infrastructure::tx-salesorder-service.yaml"
                ParameterOverrides:  !Sub
                  |
                  {
                    "ConfigurationChannel": "${ConfigurationChannel}"
                  }
              InputArtifacts:
                - Name: "infrastructure"
                - Name: "infrastructureConfig"
              RunOrder: 1


  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Description: "Execute maven clean verify and output the jar. Runs the tests and checkstyle."
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              commands:
                - apt-get update -y
                - pip install awscli --upgrade --user
                - apt-get install -y jq
            build:
              commands:
                - download_url=$(cat ecs-configuration.json | jq '.ArtifactConfiguration.ServiceInfrastructureUrl' -r)
                - aws s3 cp "${download_url}" ./
                - unzip -o ./*.zip
                - jqQuery="{Parameters:.InfrastructureConfiguration.Parameters, Tags:.InfrastructureConfiguration.Tags, StackPolicy:.InfrastructureConfiguration.StackPolicy}"
                - cat ecs-configuration.json | jq "${jqQuery}" > cloudformation-parameters.json
          artifacts:
            secondary-artifacts:
              infrastructure:
                files:
                  - tx-salesorder-service.yaml
              infrastructureConfig:
                files:
                  - cloudformation-parameters.json
      Environment:
        ComputeType:  BUILD_GENERAL1_MEDIUM
        Image: aws/codebuild/ubuntu-base:14.04
        Type: LINUX_CONTAINER
      Name: !Ref AWS::StackName
      ServiceRole: !Ref CodeBuildServiceRole

  DeploymentPipelineServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "codepipeline.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"

  DeploymentPipelineServiceRolePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "tx-codepipeline-policy"
      Roles: [!Ref DeploymentPipelineServiceRole]
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: "AllowS3Access"
            Effect: Allow
            Action:
              - s3:PutObject
            Resource:
              - "arn:aws:s3:::codepipeline*"
              - "arn:aws:s3:::elasticbeanstalk*"
          - Sid: "AllowOrchestrationAccess"
            Effect: Allow
            Action:
              - "s3:GetObject"
              - "s3:GetObjectVersion"
              - "s3:GetBucketVersioning"
              - "elasticbeanstalk:*"
              - "ec2:*"
              - "elasticloadbalancing:*"
              - "autoscaling:*"
              - "cloudwatch:*"
              - "s3:*"
              - "sns:*"
              - "cloudformation:*"
              - "rds:*"
              - "sqs:*"
              - "ecs:*"
              - "iam:PassRole"
              - "lambda:InvokeFunction"
              - "lambda:ListFunctions"
              - "cloudformation:CreateStack"
              - "cloudformation:DeleteStack"
              - "cloudformation:DescribeStacks"
              - "cloudformation:UpdateStack"
              - "cloudformation:CreateChangeSet"
              - "cloudformation:DeleteChangeSet"
              - "cloudformation:DescribeChangeSet"
              - "cloudformation:ExecuteChangeSet"
              - "cloudformation:SetStackPolicy"
              - "cloudformation:ValidateTemplate"
              - "iam:PassRole"
              - "codebuild:*"
              - "logs:*"
            Resource: "*"

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
              - Resource: !Sub arn:aws:s3:::tx-artifacts*/*
                Effect: Allow
                Action:
                  - s3:*

  ServiceDeploymentCloudformationRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "cloudformation.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"

  ServiceDeploymentCloudformationIAMAccessPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "tx-cloudformation-iam-access"
      Roles: [!Ref ServiceDeploymentCloudformationRole]
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: "AllowIamAccess"
            Effect: Allow
            Action:
              - iam:*
            Resource:
              - !Join [":", ["arn:aws:iam:", !Ref "AWS::AccountId", "role/tx*"]]
              - !Join [":", ["arn:aws:iam:", !Ref "AWS::AccountId", "user/tx*"]]
              - !Join [":", ["arn:aws:iam:", !Ref "AWS::AccountId", "instance-profile/tx*"]]
              - !Join [":", ["arn:aws:iam:", !Ref "AWS::AccountId", "policy/tx*"]]

  ServiceDeploymentCloudformationS3AccessPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "tx-cloudformation-s3-access"
      Roles: [!Ref ServiceDeploymentCloudformationRole]
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: "AllowS3Access"
            Effect: Allow
            Action:
              - "s3:*"
            Resource:
              - "arn:aws:s3:::tx*"
              - "arn:aws:s3:::elasticbeanstalk*"

  ServiceDeploymentCloudformationSnsTxFullAccessPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "tx-cloudformation-SNS-tx-full-access"
      Roles: [!Ref ServiceDeploymentCloudformationRole]
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: "AllowSnsTopicTxNamespace"
            Effect: Allow
            Action:
              - "sns:*"
            Resource: !Join [":", ["arn:aws:sns", !Ref "AWS::Region", !Ref "AWS::AccountId", "tx*"]]

  ServiceDeploymentCloudformationAllAccessPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "tx-cloudformation-all-access"
      Roles: [!Ref ServiceDeploymentCloudformationRole]
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: "AllowAccessAllResources"
            Effect: Allow
            Action:
              - "ecs:*"
              - "ec2:*"
              - "rds:*"
              - "iam:GetRole"
              - "iam:CreateRole"
              - "logs:*"
              - "route53:*"
              - "sns:ListTopics"
              - "sqs:GetQueueAttributes"
              - "lambda:*"
              - "cloudformation:*"
              - "codepipeline:*"
              - "apigateway:*"
              - "cloudfront:*"
              - "elasticbeanstalk:*"
              - "elasticloadbalancing:*"
              - "autoscaling:*"
              - "cloudwatch:*"
              - "sqs:*"
              - "sns:*"
              - "servicediscovery:*"
            Resource: "*"

  ServiceDeploymentCloudformationIamTxFullAccessPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "tx-cloudformation-iam-tx-full-access"
      Roles: [!Ref ServiceDeploymentCloudformationRole]
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: "AllowIamAccess"
            Effect: Allow
            Action:
              - iam:*
            Resource:
              - !Join [":", ["arn:aws:iam:", !Ref "AWS::AccountId", "role/tx*"]]
              - !Join [":", ["arn:aws:iam:", !Ref "AWS::AccountId", "user/tx*"]]
              - !Join [":", ["arn:aws:iam:", !Ref "AWS::AccountId", "instance-profile/tx*"]]
              - !Join [":", ["arn:aws:iam:", !Ref "AWS::AccountId", "policy/tx*"]]
              - !Join [":", ["arn:aws:iam:", !Ref "AWS::AccountId", "role/Lambda*"]]
